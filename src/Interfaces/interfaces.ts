import type {
	ChatInputCommandInteraction,
	GuildMember,
	ButtonInteraction,
} from 'discord.js';

export interface BotConfig {
	/** The bot's token. */
	token: string;
	/** The MongoDB database URI. */
	database: string;
	/** The array of IDs for the owners / developers of the bot. */
	ownerIDs: Array<string>;
	/** The key used to decrypt user's webhooks. */
	decryptionKey: string;
	/** The user agent which will be provided when needed to API services that require it. */
	userAgent: string;

	/** The debug object containing debug related information. */
	debug: {
		devGuild: string;
		overwatchChannel: string;
		statKey: string;
		watcherHook: string;
	};

	APIs: {
		/** The API key generated by RAWG.io. */
		rawgKey: string;
		/** The API key generated by the Genius Developer Portal. */
		geniusKey: string;
		/** The API key generated by the The Cat API Dashboard. */
		cattoKey: string;
		/** The API key generated by the OMDB API Portal. */
		omdbAPIKey: string;
	};

	music: {
		/** The array of lavalink nodes. */
		nodes: {
			/** The name of the node. */
			name: string;
			/** The IP of the node. */
			host: string;
			/** The port of the node. */
			port: number;
			/** The password for the node. */
			password: string;
			/** The SSL boolean of the node. Set this to true if you get an SSL error. */
			secure: boolean;
		}[];
	};
}

export interface GBooksInterface {
	/** The title of the book. */
	title: string;
	/** The description of the book. */
	description: string;
	/** The authors of the book. */
	authors: string[];
	/** The publisher of the book. */
	publisher: string;
	/** The number of pages that the book has. */
	pageCount: string;
	/** The date when the book was published. */
	publishedDate: string;
	/** The date when the book was published but in Unix. */
	publishedDateUnix: number;
	/** The genres the anime is under. */
	categories: string[];
	/** The cover image of the book. */
	coverImage: {
		smallThumbnail: string;
		thumbnail: string;
	};
}

export interface KitsuInterface {
	/** The description of the anime. Usually the same as the synopsis. */
	description: string;
	/** The synopsis of the anime. */
	synopsis: string;
	/** The titles of the anime. Can be English or Japanese. */
	titles: {
		/** The english title of the anime. */
		en_us: string;
		/** The japanese title of the anime. */
		ja_JP: string;
	};
	/** The genres the anime is under. */
	genres?: string[];
	/** The status of the anime. Can be finished, ongoing or current.*/
	status: string;
	/** The average rating of the anime. */
	averageRating: string;
	/** The date when the anime started airing. */
	startDate: string;
	/** The date when the anime started airing but in a unix format. */
	startDateUnix: number;
	/** The date when the anime ended. */
	endDate: string;
	/** The date when the anime ended.*/
	endDateUnix: number;
	/** The age rating of the anime. */
	ageRating: string;
	/** The rating guide of the anime. */
	ageRatingGuide: string;
	/** The poster image of the anime. Can be tiny, large, small, medium or original size. */
	posterImage: {
		tiny: string;
		large: string;
		small: string;
		medium: string;
		original: string;
	};
	/** The cover image of the anime. Can be tiny, large, small, medium or original size. */
	coverImage: {
		tiny: string;
		large: string;
		small: string;
		original: string;
	};
	/** The number of episodes the anime has. */
	episodeCount: number;
}

export interface RAWGInterface {
	/** The name of the game. */
	name: string;
	/** The description of the game. */
	description: string;
	/** The URI of the game's RAWG page. */
	uri: string;
	/** The game's developer(s). */
	developers: string[];
	/** The game's publisher(s). */
	publishers: string[];
	/** The platform(s) the game is available on. */
	platforms: string[];
	/** The game's critic rating on Metacritic. */
	metacriticRating: number;
	/** The game's release date in Unix. */
	releaseDate: number;
	/** The game's genres. */
	genres: string[];
	/** The link to the game's art. */
	background_image: string;
}

/** An extended version of the base CICI so I stop defining shit with types in code. */
export interface ExtendedChatInteraction extends ChatInputCommandInteraction {
	member: GuildMember;
}

/** An extended version of the base BI so I stop defining shit with types in code. */
export interface ExtendedButtonInteraction extends ButtonInteraction {
	member: GuildMember;
}
